{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","Hash","id","name","email","CardList","cardComponents","robots","map","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialState","initialStateRobots","logger","createLogger","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.94cd7a76.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport Hash from 'object-hash';\n\nconst Card = (props) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${Hash(props)}?200x200&set=set${props.id%4+1}`} />\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n    \n    const cardComponents = robots.map( ({ id, name, email }) => {\n        return <Card key={id} id={id} name={name} email={email} />\n    })\n\n    return (\n        <div>\n            { cardComponents }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ( { searchField, searchChange } ) => {\n    return (\n        <div>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    )\n};\n\nexport default SearchBox;","import React from 'react';\n\nexport const Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '700px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState( { hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good.</h1>\n        }\n\n        return this.props.children\n    }\n} \n\nexport default ErrorBoundary;\n\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\nimport { connect } from 'react-redux';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props\n        const filteredRobots = robots.filter(\n            robot => robot.name.toLowerCase().includes(searchField.toLowerCase())\n        )\n        if (isPending) { \n            return (\n                <div className='tc'>\n                    <h1>Loading...</h1>\n                </div>\n            )\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}> </CardList>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => { \n    dispatch({ type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then( response => response.json() )\n        .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }) )\n        .catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}) )\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\"\n\nconst initialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {...state, searchField: action.payload};\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\n\n\nconst logger = createLogger()\nconst reducers = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n    <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}